name: Production Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

env:
  NODE_ENV: production
  DEPLOY_TARGET: azure  # Options: local, azure, aws, github-pages
  AZURE_STORAGE_ACCOUNT: todoapprodstatic
  AWS_S3_BUCKET: todo-app-prod
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Install dependencies
        run: npm ci || npm install
        
      - name: Validate HTML
        run: npm run lint:html
    
      - name: Lint CSS
        run: npm run lint:css
    
      - name: Lint JavaScript
        run: npm run lint:js
      
      - name: Run Tests
        run: npm test
      
      - name: Build for Production
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Archive build artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-files
          path: build/
      
      - name: Create Release Asset
        if: ${{ github.event_name == 'release' }}
        run: |
          zip -r website.zip build/
          echo "Creating release asset for ${{ github.event.release.tag_name }}"
      
      - name: Upload Release Asset
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./website.zip
          asset_name: website-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip
        
      - name: Notify Build Status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd-notifications
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/saketmishra7224.png?size=48
          SLACK_TITLE: 'Production Build Status'
          SLACK_MESSAGE: 'Production build ${{ job.status }} for commit ${{ github.sha }}'
          SLACK_USERNAME: GitHub Actions
        continue-on-error: true
        
  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    environment: production  # Using GitHub Environments for additional protection
    
    steps:
      - name: Checkout code for workflow scripts
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-files
          path: ./deploy
        
      - name: Setup .NET Core for Azure
        if: ${{ env.DEPLOY_TARGET == 'azure' }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          
      - name: Install Azure CLI
        if: ${{ env.DEPLOY_TARGET == 'azure' }}
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
      - name: Login to Azure
        if: ${{ env.DEPLOY_TARGET == 'azure' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure Storage
        if: ${{ env.DEPLOY_TARGET == 'azure' }}
        run: |
          echo "Deploying to Azure Storage: ${{ env.AZURE_STORAGE_ACCOUNT }}"
          az storage blob upload-batch -s ./deploy -d '$web' --account-name ${{ env.AZURE_STORAGE_ACCOUNT }}
          echo "Deployment complete! Site available at: https://${{ env.AZURE_STORAGE_ACCOUNT }}.z13.web.core.windows.net/"
        
      - name: Configure AWS credentials
        if: ${{ env.DEPLOY_TARGET == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to AWS S3
        if: ${{ env.DEPLOY_TARGET == 'aws' }}
        run: |
          echo "Deploying to AWS S3 bucket: ${{ env.AWS_S3_BUCKET }}"
          aws s3 sync ./deploy s3://${{ env.AWS_S3_BUCKET }} --delete
          echo "Deployment complete! Site available at: http://${{ env.AWS_S3_BUCKET }}.s3-website-us-east-1.amazonaws.com/"
          
      - name: Invalidate CloudFront Cache
        if: ${{ env.DEPLOY_TARGET == 'aws' && env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          echo "Invalidating CloudFront cache for distribution ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      
      - name: Deploy to GitHub Pages
        if: ${{ env.DEPLOY_TARGET == 'github-pages' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./deploy
          branch: gh-pages
          target-folder: prod
          
      - name: Notify Deployment Status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd-notifications
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/saketmishra7224.png?size=48
          SLACK_TITLE: 'Production Deployment Status'
          SLACK_MESSAGE: 'Production deployment ${{ job.status }} for commit ${{ github.sha }}'
          SLACK_USERNAME: GitHub Actions
        continue-on-error: true
          monitor:
    needs: deploy-prod
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Monitor Production Environment
        run: |
          echo "Monitoring production environment..."
          # Here you could add actual monitoring setup using tools like New Relic, Datadog, etc.
          curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_STORAGE_ACCOUNT }}.z13.web.core.windows.net/ || true
          echo "Status check complete"
      
      - name: Run Performance Benchmark
        run: |
          echo "Running performance benchmark..."
          # Use our custom performance monitoring script
          node performance-monitor.js https://${{ env.AZURE_STORAGE_ACCOUNT }}.z13.web.core.windows.net/ --ci
          echo "Performance benchmark complete"
      
      - name: Send Performance Report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Production Environment Performance Report"
          body: |
            Production deployment was successful!
            
            Environment: Production
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View the deployment at: https://${{ env.AZURE_STORAGE_ACCOUNT }}.z13.web.core.windows.net/
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions
        continue-on-error: true